{"name": "test_place_limit_buy_order_with_gtc_expiry", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <testcases.test_peding_order.TestPendingOrder object at 0x0000021FFD0CF910>\n\n    def test_place_limit_buy_order_with_gtc_expiry(self):\n        trading_home_page = TradingHomePage(self.driver)\n        ask_price = trading_home_page.get_ask_price()\n        price_limit = ask_price - 1000\n        sl_price = price_limit - config.SL\n        tp_price = price_limit + config.TP\n    \n        trading_home_page.click_buy_button()\n        trading_home_page.click_order_type_dropdown_and_select(\"Limit\")\n        trading_home_page.input_size(config.SIZE)\n        trading_home_page.input_price_limit(price_limit)\n        trading_home_page.input_sl_price(sl_price)\n        trading_home_page.input_tp_price(tp_price)\n        trading_home_page.click_expiry_type_dropdown_and_select(\"good-till-cancelled\")\n        sl_price_formatted = format(sl_price, \",\")\n        trading_home_page.click_trade_button()\n        trading_home_page.click_confirm_button()\n>       trading_home_page.validate_order_details_with_notification(config.SYMBOL, \"BUY_LIMIT\", \"Limit\", price_limit,\n                                                               config.SIZE,\n                                                               sl_price, tp_price)\n\ntestcases\\test_peding_order.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.trading_home_page.TradingHomePage object at 0x0000021FFD4954D0>\nsymbol = 'BTCUSD.std', order_action = 'BUY_LIMIT', order_type = 'Limit'\nentry_price = 104569.6, size = 0.06, sl = 103569.6, tp = 105569.6\n\n    def validate_order_details_with_notification(self, symbol, order_action, order_type, entry_price, size, sl, tp):\n        file_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'resources', 'expected_notifications.json')\n    \n        data = modify_notification_data(file_path, symbol, order_type, entry_price, size, sl, tp)\n        expected_title = data[order_type]['title']\n        expected_description = data[order_type][order_action.upper()]\n    \n        notification_title = self.get_notification_title()\n        notification_description = self.get_notification_description()\n    \n        assert notification_title == expected_title\n>       assert notification_description == expected_description\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError\n\npages\\trading_home_page.py:345: AssertionError"}, "start": 1749998776484, "stop": 1749998779525, "uuid": "4d4566b2-0d85-4cc4-a462-51dc314ab581", "historyId": "d01911646f35aa4d44d352070df8b2ca", "testCaseId": "d01911646f35aa4d44d352070df8b2ca", "fullName": "testcases.test_peding_order.TestPendingOrder#test_place_limit_buy_order_with_gtc_expiry", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_peding_order"}, {"name": "subSuite", "value": "TestPendingOrder"}, {"name": "host", "value": "DESKTOP-36P47OC"}, {"name": "thread", "value": "15200-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_peding_order"}]}