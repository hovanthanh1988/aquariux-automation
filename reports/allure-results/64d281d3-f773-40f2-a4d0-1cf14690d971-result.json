{"name": "test_place_limit_buy_order_with_sl_tp", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <testcases.test_peding_order.TestPendingOrder object at 0x0000021ECE9E92D0>\n\n    def test_place_limit_buy_order_with_sl_tp(self):\n        trading_home_page = TradingHomePage(self.driver)\n        ask_price = trading_home_page.get_ask_price()\n        price_limit = ask_price - 1000\n        sl_price = price_limit - config.SL\n        tp_price = price_limit + config.TP\n    \n        trading_home_page.click_buy_button()\n        trading_home_page.click_order_type_dropdown_and_select(\"Limit\")\n        trading_home_page.input_size(config.SIZE)\n        trading_home_page.input_price_limit(price_limit)\n        trading_home_page.input_sl_price(sl_price)\n        trading_home_page.input_tp_price(tp_price)\n        trading_home_page.click_expiry_type_dropdown_and_select(\"good-till-cancelled\")\n        sl_price_formatted = format(sl_price, \",\")\n        trading_home_page.click_trade_button()\n        trading_home_page.click_confirm_button()\n        trading_home_page.validate_order_details_with_notification(config.SYMBOL, \"BUY\", \"Limit\", price_limit,\n                                                               config.SIZE,\n                                                               sl_price, tp_price)\n        trading_home_page.click_pending_order_tab()\n>       trading_home_page.validate_placed_details_on_pending_order_table(\"BUY\", config.SIZE, price_limit, tp_price,\n                                                                 sl_price_formatted, \"Good Till Cancelled\")\n\ntestcases\\test_peding_order.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.trading_home_page.TradingHomePage object at 0x0000021ECFC8E9D0>\norder_action = 'BUY', size = 0.06, price_limit = 104450.6, tp = 105450.6\nsl = '103,450.6', expiry = 'Good Till Cancelled'\n\n    def validate_placed_details_on_pending_order_table(self, order_action, size, price_limit, tp, sl, expiry):\n        time.sleep(10)\n        expected_open_date = datetime.now().date().strftime(\"%Y-%m-%d\")\n        actual_pending_order_date = self.get_pending_order_date(sl)\n        actual_pending_order_type = self.get_pending_order_type(sl)\n        actual_pending_order_size = self.get_pending_order_size(sl)\n        actual_pending_order_unit = self.get_pending_order_unit(sl)\n        actual_pending_order_expiry = self.get_pending_order_expiry(sl)\n        actual_pending_order_price = self.get_pending_order_price(sl)\n        actual_pending_order_take_profit = self.get_pending_order_take_profit(sl)\n        actual_pending_order_stop_loss = self.get_pending_order_stop_loss(sl)\n    \n        assert expected_open_date in actual_pending_order_date\n>       assert actual_pending_order_type == order_action\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError\n\npages\\trading_home_page.py:397: AssertionError"}, "start": 1749998202997, "stop": 1749998216756, "uuid": "d2114741-26ab-4a4b-b2d2-327bb59ee61a", "historyId": "35f5347989988c9a4ac8471a7ce64a72", "testCaseId": "35f5347989988c9a4ac8471a7ce64a72", "fullName": "testcases.test_peding_order.TestPendingOrder#test_place_limit_buy_order_with_sl_tp", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_peding_order"}, {"name": "subSuite", "value": "TestPendingOrder"}, {"name": "host", "value": "DESKTOP-36P47OC"}, {"name": "thread", "value": "23360-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_peding_order"}]}