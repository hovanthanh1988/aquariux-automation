{"name": "test_close_partial_open_position", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: JavaScript code failed\nfrom unknown command: 'Runtime.evaluate' wasn't found\n  (Session info: chrome=137.0.7151.104)\nStacktrace:\n\tGetHandleVerifier [0x0x1163783+63299]\n\tGetHandleVerifier [0x0x11637c4+63364]\n\t(No symbol) [0x0xf91113]\n\t(No symbol) [0x0xf81190]\n\t(No symbol) [0x0xf7fb19]\n\t(No symbol) [0x0xf8038d]\n\t(No symbol) [0x0xfa337a]\n\t(No symbol) [0x0xf9984d]\n\t(No symbol) [0x0xf99772]\n\t(No symbol) [0x0xf732c3]\n\t(No symbol) [0x0xf7151f]\n\t(No symbol) [0x0x1032e48]\n\t(No symbol) [0x0xffe57c]\n\t(No symbol) [0x0x101fa4a]\n\t(No symbol) [0x0xffe376]\n\t(No symbol) [0x0xfcd6e0]\n\t(No symbol) [0x0xfce544]\n\tGetHandleVerifier [0x0x13be073+2531379]\n\tGetHandleVerifier [0x0x13b9372+2511666]\n\tGetHandleVerifier [0x0x1189efa+220858]\n\tGetHandleVerifier [0x0x117a548+156936]\n\tGetHandleVerifier [0x0x1180c7d+183357]\n\tGetHandleVerifier [0x0x116b6e8+95912]\n\tGetHandleVerifier [0x0x116b890+96336]\n\tGetHandleVerifier [0x0x115666a+9770]\n\tBaseThreadInitThunk [0x0x767dfa29+25]\n\tRtlGetAppContainerNamedObjectPath [0x0x778e7a9e+286]\n\tRtlGetAppContainerNamedObjectPath [0x0x778e7a6e+238]", "trace": "request = <SubRequest 'setup' for <Function test_close_partial_open_position>>\n\n    @fixture(scope=\"function\")\n    def setup(request):\n        browser = request.config.getoption(\"--browser\")\n    \n        service = Service(ChromeDriverManager().install())\n        driver = webdriver.Chrome(service=service)\n    \n>       driver.maximize_window()\n\nconftest.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:638: in maximize_window\n    self.execute(command, None)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001DD5A1DB410>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: JavaScript code failed\\\\nfrom un...tRtlGetAppContainerNamedObjectPath [0x0x778e7a9e+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x0x778e7a6e+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: JavaScript code failed\nE       from unknown command: 'Runtime.evaluate' wasn't found\nE         (Session info: chrome=137.0.7151.104)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x1163783+63299]\nE       \tGetHandleVerifier [0x0x11637c4+63364]\nE       \t(No symbol) [0x0xf91113]\nE       \t(No symbol) [0x0xf81190]\nE       \t(No symbol) [0x0xf7fb19]\nE       \t(No symbol) [0x0xf8038d]\nE       \t(No symbol) [0x0xfa337a]\nE       \t(No symbol) [0x0xf9984d]\nE       \t(No symbol) [0x0xf99772]\nE       \t(No symbol) [0x0xf732c3]\nE       \t(No symbol) [0x0xf7151f]\nE       \t(No symbol) [0x0x1032e48]\nE       \t(No symbol) [0x0xffe57c]\nE       \t(No symbol) [0x0x101fa4a]\nE       \t(No symbol) [0x0xffe376]\nE       \t(No symbol) [0x0xfcd6e0]\nE       \t(No symbol) [0x0xfce544]\nE       \tGetHandleVerifier [0x0x13be073+2531379]\nE       \tGetHandleVerifier [0x0x13b9372+2511666]\nE       \tGetHandleVerifier [0x0x1189efa+220858]\nE       \tGetHandleVerifier [0x0x117a548+156936]\nE       \tGetHandleVerifier [0x0x1180c7d+183357]\nE       \tGetHandleVerifier [0x0x116b6e8+95912]\nE       \tGetHandleVerifier [0x0x116b890+96336]\nE       \tGetHandleVerifier [0x0x115666a+9770]\nE       \tBaseThreadInitThunk [0x0x767dfa29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x778e7a9e+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x778e7a6e+238]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException"}, "start": 1749978768628, "stop": 1749978768628, "uuid": "17ebcc8f-e3b9-46ef-b0a3-df6bd8b9fcae", "historyId": "2fbf06fe28634b05b16abe3e8fb3ccf6", "testCaseId": "2fbf06fe28634b05b16abe3e8fb3ccf6", "fullName": "testcases.test_market_order.TestMarketOrder#test_close_partial_open_position", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_market_order"}, {"name": "subSuite", "value": "TestMarketOrder"}, {"name": "host", "value": "DESKTOP-36P47OC"}, {"name": "thread", "value": "15124-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_market_order"}]}